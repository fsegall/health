openapi: 3.0.0
info:
  description: "This is an API for managing data about people and there households to conduct food security analysis during the COVID-19 pandemic"
  version: 1.0
  title: Health API
  termsOfService: http://swagger.io/terms/
  contact:
    email:segall.felipe@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: persons
    description: Endpoint to manage data about the person that was interviewed
#     externalDocs:
#       description: Find out more
#       url: http://swagger.io
  - name: households
    description: Endpoints to manage data about a household
  - name: familymembers
    description: Endpoints to manage data about a family member
  - name: addresses
    description: Endpoints to manage data about a household address
  - name: projects
    description: Endpoints to manage data about projects
  - name: interviews
    description: Endpoints to manage data about interviews
  - name: sessions
    description: Endpoints to authenticate the user
  - name: password
    description: Endpoints to make a new password
  - name: users
    description: Endpoints to create an user and store data about the research interviewer
paths:
  /projects:
    post:
      tags:
        - projects
      summary: Adds a new project to the research
      description: ""
      operationId: addProject
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Project"
      responses:
        "201":
          description: A project was successfully saved to the database
        "405":
          description: Invalid input
        "401":
          description: Unauthorized

  /interviews:
    post:
      tags:
        - interviews
      summary: Adds a new interview to the project
      description: ""
      operationId: addInterview
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Interview"
      responses:
        "201":
          description: A project was successfully saved to the database
        "405":
          description: Invalid input
        "401":
          description: Unauthorized

  /persons:
    get:
      tags:
        - persons
      summary: Lists all persons that were interviewed
      description: ""
      operationId: listPersons
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "401":
          description: Unauthorized
    post:
      tags:
        - persons
      summary: Add a person that was interviewed
      description: ""
      operationId: addPerson
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Person"
      responses:
        "201":
          description: A person was successfully saved to the database
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
    put:
      tags:
        - persons
      summary: Update an existing person
      description: ""
      operationId: updatePerson
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PersonUpdate"
      responses:
        "200":
          description: The person was updated
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
        "405":
          description: Validation exception
        "401":
          description: Unauthorized

  "/persons/{personId}":
    get:
      tags:
        - persons
      summary: Find person by ID
      description: Returns a single person
      operationId: getPersonById
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: ID of person to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully returned a person profile
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Person"
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
        "401":
          description: Unauthorized
    delete:
      tags:
        - persons
      summary: Deletes a person
      description: ""
      operationId: deletePerson
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The person was deleted
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
        "401":
          description: Unauthorized

  "/persons/{personId}/household":
    get:
      tags:
        - persons
      summary: Returns a household
      description: ""
      operationId: getHouseholdByPersonId
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Household"
            application/json:
              schema:
                $ref: "#/components/schemas/Household"
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
        "401":
          description: Unauthorized

  "/persons/{personId}/family":
    get:
      tags:
        - persons
      summary: Returns family members
      description:
      operationId: getFamilyByPersonId
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully returned family members
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FamilyMember"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FamilyMember"
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
        "401":
          description: Unauthorized

  /households:
    get:
      tags:
        - households
      summary: Lists all households
      description: ""
      operationId: listHouseholds
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Household"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Household"
        "401":
          description: Unauthorized
    post:
      tags:
        - households
      summary: Add a household of an interviewed person
      description: ""
      operationId: addHousehold
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Household"
      responses:
        "201":
          description: A household was successfully saved to the database
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Household"
            application/json:
              schema:
                $ref: "#/components/schemas/Household"
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
  /familymembers:
    get:
      tags:
        - familymembers
      summary: Lists all family members
      description: ""
      operationId: listFamilyMembers
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/FamilyMember"
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FamilyMember"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FamilyMember"
        "401":
          description: Unauthorized
    post:
      tags:
        - familymembers
      summary: Add a family member of an interviewed person
      description: ""
      operationId: addFamilyMember
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/FamilyMember"
      responses:
        "201":
          description: A family member was successfully saved to the database
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
  /addresses:
    get:
      tags:
        - addresses
      summary: Lists all addresses
      description: ""
      operationId: listAddresses
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        "401":
          description: Unauthorized
    post:
      tags:
        - addresses
      summary: Add a household address
      description: ""
      operationId: addAddress
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "201":
          description: An address was successfully saved to the database
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Address"
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
  /addresses/{personId}:
    get:
      tags:
        - addresses
      summary: Returns an address
      description: Address of the interviewed person
      operationId: getAddressByPersonId
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Address"
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
        "401":
          description: Unauthorized
  /users:
    get:
      tags:
        - users
      summary: Lists all users
      description: ""
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
    post:
      tags:
        - users
      summary: Create user
      description: This creates an interviewer profile as an user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        "201":
          description: The user was successfully created
        "400":
          description: Invalid user data
    put:
      tags:
        - users
      summary: Update an existing user - Interviewer profile
      description: ""
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UserUpdate"
      responses:
        "200":
          description: The user was updated
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "405":
          description: Validation exception
        "401":
          description: Unauthorized
  /users/avatar:
    patch:
      tags:
        - users
      summary: Uploads an user avatar file
      description: ""
      operationId: uploadAvatar
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "201":
          description: The user was successfully created
        "400":
          description: Invalid user data

  "/users/{userId}":
    get:
      tags:
        - users
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully returned a user profile
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Person"
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "401":
          description: Unauthorized


  /sessions:
    post:
      tags:
        - sessions
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      requestBody:
        $ref: "#/components/requestBodies/Auth"
      responses:
        "200":
          description: login successful
#           headers:
#             X-Rate-Limit:
#               description: calls per hour allowed by the user
#               schema:
#                 type: integer
#                 format: int32
#             X-Expires-After:
#               description: date in UTC when token expires
#               schema:
#                 type: string
#                 format: date-time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Auth"
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        "400":
          description: Invalid username/password supplied

  /password/forgot:
    post:
      tags:
        - password
      summary: Allows user to ask for new password
      description: ""
      operationId: newPassword
      requestBody:
        $ref: "#/components/requestBodies/Pass"
      responses:
        "200":
          description: login successful
  #           headers:
  #             X-Rate-Limit:
  #               description: calls per hour allowed by the user
  #               schema:
  #                 type: integer
  #                 format: int32
  #             X-Expires-After:
  #               description: date in UTC when token expires
  #               schema:
  #                 type: string
  #                 format: date-time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pass"
            application/json:
              schema:
                $ref: "#/components/schemas/Pass"
        "400":
          description: Invalid email supplied
  /password/reset:
    post:
      tags:
        - password
      summary: Allows user to change password
      description: ""
      operationId: newPassword
      requestBody:
        $ref: "#/components/requestBodies/NewPass"
      responses:
        "200":
          description: Password modified successfully
  #           headers:
  #             X-Rate-Limit:
  #               description: calls per hour allowed by the user
  #               schema:
  #                 type: integer
  #                 format: int32
  #             X-Expires-After:
  #               description: date in UTC when token expires
  #               schema:
  #                 type: string
  #                 format: date-time
        "400":
          description: Invalid username/password supplied


externalDocs:
  description: Find out more about this API here
  url: http://swagger.io
servers:
#   - url: https://safety.developerme.xyz/
    - url: http://localhost:3333/

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    Project:
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/Project"
        application/xml:
          schema:
            $ref: "#/components/schemas/Project"
      description: Data format to create a project
      required: true
    Interview:
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/Interview"
        application/xml:
          schema:
            $ref: "#/components/schemas/Interview"
      description: Data format to create an interview
      required: true
    Person:
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/Person"
        application/xml:
          schema:
            $ref: "#/components/schemas/Person"
      description: Data format to create a person
      required: true
    PersonUpdate:
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/PersonUpdate"
        application/xml:
          schema:
            $ref: "#/components/schemas/PersonUpdate"
      description: Data format to create a person
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
        application/xml:
          schema:
            $ref: "#/components/schemas/User"
      description: Data format to add an user
      required: true
    UserUpdate:
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/UserUpdate"
        application/xml:
          schema:
            $ref: "#/components/schemas/UserUpdate"
      description: Data format to create a person
      required: true
    Household:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Household"
        application/xml:
          schema:
            $ref: "#/components/schemas/Household"
      description: Data format to add a Household
      required: true
    FamilyMember:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FamilyMember"
        application/xml:
          schema:
            $ref: "#/components/schemas/FamilyMember"
      description: Data format to add a family member
      required: true

    Address:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Address"
        application/xml:
          schema:
            $ref: "#/components/schemas/Address"
      description: Data format to add a address
      required: true
    Auth:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Auth"
        application/xml:
          schema:
            $ref: "#/components/schemas/Auth"
      description: Data format to authenticate an user
      required: true
    Pass:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pass"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pass"
      description: Data format to reset password for the user
      required: true
    NewPass:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewPass"
        application/xml:
          schema:
            $ref: "#/components/schemas/NewPass"
      description: Data format to reset password for the user
      required: true
  schemas:
    Project:
      type: object
      properties:
        user_id:
          type: string
        name:
          type: string
        organizations:
          type: string
      xml:
        name: Project
    Interview:
      type: object
      properties:
        interviewer_id:
          type: string
        person_id:
          type: string
        household_id:
          type: string
        address_id:
          type: string
        familymember_id:
          type: string
        is_complete:
          type: booelan
        interview_type:
          type: string
        comments:
          type: string
      xml:
        name: Interview
    Person:
      type: object
      properties:
        interviewer_id:
          type: string
        name:
          type: string
        race_color:
          type: string
        education:
          type: string
        work_status:
          type: string
        covid_diagnose:
          type: string
        date_of_birth:
          type: string
          format: date-time
        gender:
          type: string
          description: Person gender
          enum:
            - male
            - female
            - other
        literacy:
          type: string
        employed_normal_salary:
          type: boolean
        employed_salary_reduced:
          type: boolean
        employed_vacations:
          type: boolean
        employed_on_leave_salary_reduced:
          type: boolean
        employed_on_leave_normal_salary:
          type: boolean
        employed_on_leave_no_salary:
          type: boolean
        retired:
          type: boolean
        self_employed_legally:
          type: boolean
        odd_jobs:
          type: boolean
        revenue:
          type: boolean
        employer:
          type: boolean
      xml:
        name: Person
    PersonUpdate:
      type: object
      properties:
        interviewer_id:
          type: string
        person_id:
          type: string
        name:
          type: string
        race_color:
          type: string
        education:
          type: string
        work_status:
          type: string
        covid_diagnose:
          type: string
        date_of_birth:
          type: string
          format: date-time
        gender:
          type: string
          description: Person gender
          enum:
            - masculino
            - feminino
            - outro
        literacy:
          type: string
        employed_normal_salary:
          type: boolean
        employed_salary_reduced:
          type: boolean
        employed_vacations:
          type: boolean
        employed_on_leave_salary_reduced:
          type: boolean
        employed_on_leave_normal_salary:
          type: boolean
        employed_on_leave_no_salary:
          type: boolean
        retired:
          type: boolean
        self_employed_legally:
          type: boolean
        odd_jobs:
          type: boolean
        revenue:
          type: boolean
        employer:
          type: boolean
      xml:
        name: Person
    Household:
      type: object
      properties:
        person_id:
          type: string
        household_main_person:
          type: string
        location_of_residence:
          type: string
        homeless:
          type: string
        traditional_peoples:
          type: string
        which_traditional_peoples:
          type: string
        type_of_residence:
          type: string
        construction_material:
          type: string
        drinking_water:
          type: string
        sewage:
          type: string
        number_of_rooms:
          type: integer
          format: int32
        number_of_people_household:
          type: integer
          format: int32
        one_person_household:
          type: boolean
        five_years_old_or_more:
          type: integer
          format: int32
        between_6_and_18:
          type: integer
          format: int32
        between_19_and_59:
          type: integer
          format: int32
        sixty_years_old_or_more:
          type: integer
          format: int32
        people_invited:
          type: string
#  Household diet start
        alface_acelga_repolho:
          type: boolean
        couve_brocolis_almeirao_agriao_espinafre:
          type: boolean
        abobora_cenoura_batata_doce_quiabo_caruru:
          type: boolean
        tomate_pepino_abobrinha_berinjela_chuchu_beterraba:
          type: boolean
        laranja_banana_maca_abacaxi:
          type: boolean
        arroz_macarrao_polenta_cuscuz_milho_verde:
          type: boolean
        feijao_ervilha_lentilha_grao_de_bico:
          type: boolean
        batata_comum_mandioca_cara_inhame:
          type: boolean
        ovo_frito_cozido_mexido:
          type: boolean
        leite:
          type: boolean
        amendoim_castanha_de_caju_ou_castanha_do_brasil_para:
          type: boolean
        soft_drink:
          type: boolean
        juice_can_or_box:
          type: boolean
        juice_powder:
          type: boolean
        chocolate_beverage:
          type: boolean
        flavored_yogurt:
          type: boolean
        salty_snacks:
          type: boolean
        cookies:
          type: boolean
        industrialized_dessert:
          type: boolean
        sausages:
          type: boolean
        hot_dog_or_burguer_bread:
          type: boolean
        mayonnaise_ketchup_mustard:
          type: boolean
        margarine:
          type: boolean
        instant_noodles_or_soup_or_frozen_food:
          type: boolean
#  Household diet end
        government_assistance_program_cadastro_unico:
          type: string
        government_assistance_program_bolsa_familia:
          type: string
        government_assistance_program_bpc:
          type: string
        pension:
          type: string
        prison_cash_assistance:
          type: string
        government_assistance_program_pnae:
          type: string
        food_basket_assistance:
          type: string
        low_income_restaurants:
          type: string
        covid_cash_assistance:
          type: string
        covid_cash_assistance_number_of_times:
          type: integer
          format: int32
        charity:
          type: string
        type_of_charity:
          type: string
        embarassement:
          type: string
        home_grown:
          type: string
        food_for_market:
          type: string
        market_profile:
          type: string
        difficulty_selling_food:
          type: string
        could_not_sell_food:
          type: string
        income_unkown:
          type: boolean
        family_income:
          type: integer
          format: int32
        worried_food_supply:
          type: string
        lack_food_supply:
          type: string
        afford_healthy_food:
          type: string
        poor_food_choice:
          type: string
        adult_meals:
          type: string
        adult_food_privation:
          type: string
        adult_hunger:
          type: string
        adult_one_meal_or_none:
          type: string
        how_food_is_obtained:
          type: string
        food_price_change:
          type: string
        food_profile_change:
          type: string
        food_store_type:
          type: string
        food_expenditure:
          type: string
      xml:
        name: Household
    FamilyMember:
      type: object
      properties:
        person_id:
          type: string
        gender:
          type: string
          description: Person gender
          enum:
            - masculino
            - feminino
            - outro
        age:
          type: integer
          format: int32
      xml:
        name: FamilyMember
    Address:
      type: object
      properties:
        household_id:
          type: string
        state:
          type: string
        city:
          type: string
        post_code:
          type: string
        neighborhood:
          type: string
        street_or_location:
          type: string
        telephone_number:
          type: string
        house_number:
          type: integer
          format: int32
      xml:
        name: Address
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        organization_name:
          type: string
        telephone_number:
          type: string
        password:
          type: string
      xml:
        name: User
    UserUpdate:
      type: object
      properties:
        user_id:
          type: string
        name:
          type: string
        email:
          type: string
        organization_name:
          type: string
        telephone_number:
          type: string
        old_password:
          type: string
        password:
          type: string
      xml:
        name: User
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: Auth
    Pass:
      type: object
      properties:
        email:
          type: string
      xml:
        name: Pass
    NewPass:
      type: object
      properties:
        password_confirmation:
          type: string
        password:
          type: string
        token:
          type: string
      xml:
        name: Pass
