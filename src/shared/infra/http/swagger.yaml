openapi: 3.0.0
info:
  description: 'This is an API for managing data about people and there households to conduct food security analysis during the COVID-19 pandemic'
  version: 1.0
  title: Health API
  termsOfService: http://swagger.io/terms/
  contact: email:segall.felipe@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: person
    description: Endpoint to manage data about the person that was interviewed
  #     externalDocs:
  #       description: Find out more
  #       url: http://swagger.io
  - name: household
    description: Endpoint to manage data about a household
  - name: familymember
    description: Endpoint to manage data about a family member
  - name: address
    description: Endpoint to manage data about a household address
  - name: sessions
    description: Endpoint to authenticate the user
  - name: password
    description: Endpoint to make a new password
  - name: user
    description: Endpoint to create an user and store data about the research interviewer
paths:
  /person:
    get:
      tags:
        - person
      summary: Lists all persons that were interviewed
      description: ''
      operationId: listPersons
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '401':
          description: Unauthorized
    post:
      tags:
        - person
      summary: Add a person that was interviewed
      description: ''
      operationId: addPerson
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Person'
      responses:
        '201':
          description: A person was successfully saved to the database
        '405':
          description: Invalid input
        '401':
          description: Unauthorized
    put:
      tags:
        - person
      summary: Update an existing person
      description: ''
      operationId: updatePerson
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PersonUpdate'
      responses:
        '200':
          description: The person was updated
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '405':
          description: Validation exception
        '401':
          description: Unauthorized

  '/person/{personId}':
    get:
      tags:
        - person
      summary: Find person by ID
      description: Returns a single person
      operationId: getPersonById
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: ID of person to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully returned a person profile
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '401':
          description: Unauthorized
    delete:
      tags:
        - person
      summary: Deletes a person
      description: ''
      operationId: deletePerson
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The person was deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '401':
          description: Unauthorized

  '/person/{personId}/household':
    get:
      tags:
        - person
      summary: Returns a household
      description: ''
      operationId: getHouseholdByPersonId
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Household'
            application/json:
              schema:
                $ref: '#/components/schemas/Household'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '401':
          description: Unauthorized

  '/person/{personId}/family':
    get:
      tags:
        - person
      summary: Returns family members
      description:
      operationId: getFamilyByPersonId
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully returned family members
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyMember'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyMember'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '401':
          description: Unauthorized

  /household:
    get:
      tags:
        - household
      summary: Lists all households
      description: ''
      operationId: listHouseholds
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Household'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Household'
        '401':
          description: Unauthorized
    post:
      tags:
        - household
      summary: Add a household of an interviewed person
      description: ''
      operationId: addHousehold
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Household'
      responses:
        '201':
          description: A household was successfully saved to the database
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Household'
            application/json:
              schema:
                $ref: '#/components/schemas/Household'
        '405':
          description: Invalid input
        '401':
          description: Unauthorized
  /familymember:
    get:
      tags:
        - familymember
      summary: Lists all family members
      description: ''
      operationId: listFamilyMembers
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/FamilyMember'
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyMember'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyMember'
        '401':
          description: Unauthorized
    post:
      tags:
        - familymember
      summary: Add a family member of an interviewed person
      description: ''
      operationId: addFamilyMember
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/FamilyMember'
      responses:
        '201':
          description: A family member was successfully saved to the database
        '405':
          description: Invalid input
        '401':
          description: Unauthorized
  /address:
    get:
      tags:
        - address
      summary: Lists all addresses
      description: ''
      operationId: listAddresses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
    post:
      tags:
        - address
      summary: Add a household address
      description: ''
      operationId: addAddress
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        '201':
          description: An address was successfully saved to the database
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '405':
          description: Invalid input
        '401':
          description: Unauthorized
  /address/{personId}:
    get:
      tags:
        - address
      summary: Returns an address
      description: Address of the interviewed person
      operationId: getAddressByPersonId
      security:
        - bearerAuth: []
      parameters:
        - name: personId
          in: path
          description: Get personId after creating or listing persons
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '401':
          description: Unauthorized
  /users:
    get:
      tags:
        - user
      summary: Lists all users
      description: ''
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    post:
      tags:
        - user
      summary: Create user
      description: This creates an interviewer profile as an user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        '201':
          description: The user was successfully created
        '400':
          description: Invalid user data
    put:
      tags:
        - user
      summary: Update an existing user - Interviewer profile
      description: ''
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UserUpdate'
      responses:
        '200':
          description: The user was updated
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
        '401':
          description: Unauthorized
  /users/avatar:
    patch:
      tags:
        - user
      summary: Uploads an user avatar file
      description: ''
      operationId: uploadAvatar
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '201':
          description: The user was successfully created
        '400':
          description: Invalid user data

  '/users/{userId}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully returned a user profile
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /sessions:
    post:
      tags:
        - sessions
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/Auth'
      responses:
        '200':
          description: login successful
          #           headers:
          #             X-Rate-Limit:
          #               description: calls per hour allowed by the user
          #               schema:
          #                 type: integer
          #                 format: int32
          #             X-Expires-After:
          #               description: date in UTC when token expires
          #               schema:
          #                 type: string
          #                 format: date-time
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Auth'
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          description: Invalid username/password supplied

  /password/forgot:
    post:
      tags:
        - password
      summary: Allows user to ask for new password
      description: ''
      operationId: newPassword
      requestBody:
        $ref: '#/components/requestBodies/Pass'
      responses:
        '200':
          description: login successful
          #           headers:
          #             X-Rate-Limit:
          #               description: calls per hour allowed by the user
          #               schema:
          #                 type: integer
          #                 format: int32
          #             X-Expires-After:
          #               description: date in UTC when token expires
          #               schema:
          #                 type: string
          #                 format: date-time
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pass'
            application/json:
              schema:
                $ref: '#/components/schemas/Pass'
        '400':
          description: Invalid email supplied
  /password/reset:
    post:
      tags:
        - password
      summary: Allows user to change password
      description: ''
      operationId: newPassword
      requestBody:
        $ref: '#/components/requestBodies/NewPass'
      responses:
        '200':
          description: Password modified successfully
        #           headers:
        #             X-Rate-Limit:
        #               description: calls per hour allowed by the user
        #               schema:
        #                 type: integer
        #                 format: int32
        #             X-Expires-After:
        #               description: date in UTC when token expires
        #               schema:
        #                 type: string
        #                 format: date-time
        '400':
          description: Invalid username/password supplied

externalDocs:
  description: Find out more about this API here
  url: http://swagger.io
servers:
  - url: http://localhost:3333

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    Person:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Person'
        application/xml:
          schema:
            $ref: '#/components/schemas/Person'
      description: Data format to create a person
      required: true
    PersonUpdate:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/PersonUpdate'
        application/xml:
          schema:
            $ref: '#/components/schemas/PersonUpdate'
      description: Data format to create a person
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
      description: Data format to add an user
      required: true
    UserUpdate:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/UserUpdate'
        application/xml:
          schema:
            $ref: '#/components/schemas/UserUpdate'
      description: Data format to create a person
      required: true
    Household:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Household'
        application/xml:
          schema:
            $ref: '#/components/schemas/Household'
      description: Data format to add a Household
      required: true
    FamilyMember:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FamilyMember'
        application/xml:
          schema:
            $ref: '#/components/schemas/FamilyMember'
      description: Data format to add a family member
      required: true

    Address:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Address'
        application/xml:
          schema:
            $ref: '#/components/schemas/Address'
      description: Data format to add a address
      required: true
    Auth:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Auth'
        application/xml:
          schema:
            $ref: '#/components/schemas/Auth'
      description: Data format to authenticate an user
      required: true
    Pass:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pass'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pass'
      description: Data format to reset password for the user
      required: true
    NewPass:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewPass'
        application/xml:
          schema:
            $ref: '#/components/schemas/NewPass'
      description: Data format to reset password for the user
      required: true
  schemas:
    Person:
      type: object
      properties:
        interviewer_id:
          type: string
        name:
          type: string
        race_color:
          type: string
        religion:
          type: string
        marital_status:
          type: string
        education:
          type: string
        work_status:
          type: string
        health_conditions:
          type: string
        date_of_birth:
          type: string
          format: date-time
        gender:
          type: string
          description: Person gender
          enum:
            - male
            - female
        literacy:
          type: boolean
          default: true
      xml:
        name: Person
    PersonUpdate:
      type: object
      properties:
        interviewer_id:
          type: string
        person_id:
          type: string
        name:
          type: string
        race_color:
          type: string
        religion:
          type: string
        marital_status:
          type: string
        education:
          type: string
        work_status:
          type: string
        health_conditions:
          type: string
        date_of_birth:
          type: string
          format: date-time
        gender:
          type: string
          description: Person gender
          enum:
            - male
            - female
        literacy:
          type: boolean
          default: true
      xml:
        name: Person
    Household:
      type: object
      properties:
        person_id:
          type: string
        relationship_to_main_person:
          type: string
        location_of_residence:
          type: string
        type_of_residence:
          type: string
        drinking_water:
          type: string
        number_of_rooms:
          type: integer
          format: int32
        number_of_people_household:
          type: integer
          format: int32
        family_income:
          type: integer
          format: int32
        household_main_person:
          type: boolean
          default: true
        bathroom_inside_house:
          type: boolean
        garbage_service:
          type: boolean
      xml:
        name: Household
    FamilyMember:
      type: object
      properties:
        person_id:
          type: string
        gender:
          type: string
          description: Person gender
          enum:
            - male
            - female
        age:
          type: integer
          format: int32
      xml:
        name: FamilyMember
    Address:
      type: object
      properties:
        household_id:
          type: string
        state:
          type: string
        city:
          type: string
        post_code:
          type: string
        neighborhood:
          type: string
        street_or_location:
          type: string
        telephone_number:
          type: string
        house_number:
          type: integer
          format: int32
      xml:
        name: Address
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        organization_name:
          type: string
        telephone_number:
          type: string
        password:
          type: string
      xml:
        name: User
    UserUpdate:
      type: object
      properties:
        user_id:
          type: string
        name:
          type: string
        email:
          type: string
        organization_name:
          type: string
        telephone_number:
          type: string
        old_password:
          type: string
        password:
          type: string
      xml:
        name: User
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: Auth
    Pass:
      type: object
      properties:
        email:
          type: string
      xml:
        name: Pass
    NewPass:
      type: object
      properties:
        password_confirmation:
          type: string
        password:
          type: string
        token:
          type: string
      xml:
        name: Pass
